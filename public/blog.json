{
  "posts": [
    {
      "id": 2,
      "slug": "webdriverio-before-beginning",
      "title": "1. 시작하기 전에...",
      "description": "WebdriverIO 시리즈를 시작하기 전에 필자가 WebdriverIO를 접하게 된 계기 및 간략한 소개 글입니다.",
      "coverImageUrl": "https://res.cloudinary.com/practicaldev/image/fetch/s--co5LdVu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/grantnorwood.com/app/uploads/2017/07/webdriver-io-logo.png%3Fw%3D1680%26ssl%3D1",
      "coverBackgroundColor": "hsl(214, 100%, 80%)",
      "createdAt": "2022. 2. 19.",
      "updatedAt": "2022. 3. 4.",
      "category": {
        "main": "Test Automation",
        "sub": "WebdriverIO"
      },
      "tags": [
        "webdriverio",
        "wdio",
        "e2e",
        "automation"
      ],
      "content": "\n## WebdriverIO를 접하게된 계기\n\n넥슨에서 근무하고 있을 때 ActiveX가 중단됨에 따라 유저의 PC 사양을 수집하던 것을 EXE 프로그램으로 전환해야 하는 QA 업무를 맞게 되었습니다.  \n넥슨에서 서비스하는 약 100여개가 되는 모든 게임들을 IE7 ~ IE11, Edge, Chrome, Firefox 브라우저 환경에서 확인해야 했습니다.  \n테스트 케이스가 약 100개인 테스트를 800번 진행해야 했죠. 그것도 혼자서... :scream:\n\nC# WPF를 이용하여 업무 자동화 프로그램을 토이 프로젝트로 몇번 진행한 경험을 토대로 자동화에 눈을 돌렸고 그때 처음으로 WebdriverIO를 접하게 되었습니다. (그때 당시 WebdriverIO가 버전 3에서 4로 넘어가는 시기였는데 벌써 버전 7까지 나왔네요...)\n\n그때 WebdriverIO를 선택한 기준은\n\n- Javascript 언어를 사용할 것\n  - 저는 업무에서 사용하는 언어를 우선적으로 공부합니다. (그래서 C#부터 배운...)\n- 오픈소스일 것\n  - 저 스스로 도전적으로 시험하는 터라 회사에 지원을 받기가 어려웠습니다.\n- 모든 브라우저를 지원할 것\n  - 넥슨은 오래된 게임들도 많다보니 사양이 낮은 PC까지 지원을 해줘야 했는데 그러다보니 IE7도 테스트 범위에 포함되어 있었습니다.\n- 최신 기술일 것\n  - 처음으로 자동화에 대해 공부하는거 최신 기술을 배우고 싶었습니다.\n\n그렇게 구글신에 문의해서 [Protractor](https://www.protractortest.org), [Karma](http://karma-runner.github.io) 등 여러 프레임워크를 사용해 보고 WebdriverIO를 선택하게 되었습니다.\n\n## WebdriverIO 소개\n\nWebdriverIO는 아래에 있는 모든 것들이 가능합니다.  \n그리고 이것들이 제가 WebdriverIO를 사랑하고 지금까지도 꾸준히 사용하고 있는 이유이기도 합니다.\n\n- 다양한 플랫폼 및 OS 지원\n  - Web, App, Windows, Mac 등등...\n- 다양한 테스트 툴 지원\n  - [BrowserStack](https://www.browserstack.com), [Sauce Labs](https://saucelabs.com), [TestRail](https://www.gurock.com/testrai) 등등...\n- Devtools 지원\n  - [Puppeteer](https://pptr.dev) 사용 가능\n- 다양한 테스트 프레임워크 지원\n  - [Mocha](https://mochajs.org), [Jasmine](https://jasmine.github.io), [Cucumber](https://cucumber.io)\n- 병렬 테스트 지원\n- 커스터마이징 용이\n- 사용성 용이\n  - Webdriver / Appium / Devtools 등 다양한 프로토콜에서 사용하는 API를 하나로 통합해 쉽게 사용 할 수 있습니다. ([WebdriverIO APIs](https://webdriver.io/docs/api))\n  - 간단한 설정으로 시작부터 결과, 그리고 리포트 제출까지 수월하게 진행할 수 있습니다.\n  - 기타 다양한 기능들\n- 오픈소스\n- 커뮤니티\n\n> WebdriverIO is a progressive automation framework built to automate modern web and mobile applications. It simplifies the interaction with your app and provides a set of plugins that help you create a scalable, robust and stable test suite.\n>\n> It is designed to be:\n>\n> - Extendable - Adding helper functions, or more complicated sets and combinations of existing commands is simple and really useful\n> - Compatible - WebdriverIO can be run on the WebDriver Protocol for true cross-browser testing as well as Chrome DevTools Protocol for Chromium based automation using Puppeteer.\n> - Feature Rich - The huge variety of built-in and community plugins allows you to easily integrate and extend your setup to fulfill your requirements.\n>\n> You can use WebdriverIO to automate:\n>\n> - 🌐 modern web applications written in React, Vue, Angular, Svelte or other frontend frameworks\n> - 📱 hybrid or native mobile applications running in an emulator/> -simulator or on a real device\n> - 💻 native desktop applications (e.g. written with Electron.js)\n>\n> _[WebdriverIO](https://webdriver.io/docs/what-is-webdriverio) 홈페이지에서 발췌..._\n\n더 많은 정보들은 [WebdriverIO](https://webdriver.io) 홈페이지에 가시면 있으니 한번 정독하는 것을 추천드립니다.\n\n## Javascript를 선택한 이유 그리고 Typescript\n\n자동화를 시작하기 앞서 어떤 언어를 사용할 것인지가 많은 사람들의 고민거리인 것 같습니다.\n저 같은 경우 업무에서 사용중이고, QA하는 제품이 어떤 언어를 사용하는지를 보고 그 언어를 우선적으로 사용합니다.\n\n그래서 게임 QA를 할 때는 C#을 배워서 WPF를 활용하여 [성능 체크](https://github.com/morooLee/PerfMon), [호스트 변경](https://github.com/morooLee/HostManager) 등과 같은 업무 자동화 프로그램을 토이 프로젝트로 만들었으며, Web QA를 했을 때는 C# ASP.NET을 사용해서 [Popeyetrip](https://github.com/morooLee/popeyetrip) 이라는 사이트를 만들어 실제 라이브 서비스까지 했었습니다. (지금은 Github에 코드로만.... :disappointed_relieved:)\n\nE2E 자동화가 여러 플랫폼에서 이루어지고 있지만, 대표적인 환경이라고 치면 아마도 Web이 아닐까 싶네요. 저 또한 Web을 통해 자동화를 시작하게 되었고요...\n\nWeb을 위해 [Javascript가 탄생](https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8)했고, Web/App에서 최근 인기 있는 프론트엔드 프레임워크인 [React.JS](https://ko.reactjs.org/) 등이 Javascript로 만들어진 만큼 Javascript에 대한 이해도가 충분히 필요하다고 생각이 들어 선택하게 되었습니다. (자동화를 하다 보면 간단하게라도 View가 필요하게 되는데 이럴 경우 Javascript를 잘 알고 있으면 웹 환경에서 화면을 만들기 수월합니다.)\n\n저는 C#을 먼저 배웠던 터라, 타입 정의가 없는 Javascript를 배울 때 너무 힘들었습니다.  \n그래서 그때 당시 핫했던(지금도 핫한) [Python](https://www.python.org)으로 갈아탈까 싶어 배워봤는데. 이것 또한 타입 정의가 되지 않았고 (지금은 타입 정의가 가능합니다.), 코드 블럭이 괄호가 아닌 띄어쓰기로 되어 있다 보니 범위를 파악하고 작성하는데 너무 어색했었습니다. 그러다 [Typescript](https://www.typescriptlang.org)를 알게되어서 그때부터 지금까지 쭈욱 사용하고 있습니다.\n\n## WebdriverIO Series 시작하기\n\nWebdriverIo Ver.3 부터 사용하기 시작했는데 그때 당시에 한글로된 정보가 전무하다시피해서 안되는 영어로 힘들게 배웠었습니다. 그리고 그것은 Ver.7이 된 지금까지도 여전하고요...  \n아직까지도 제대로 된 한글 튜토리얼이 없다는게 마음에 걸렸고, 후배 육성 및 국내 커뮤니티 발전에 조금이나마 이바지 하고자 본 시리즈를 시작하게 되었습니다.\n\n이를 위해 블로그를 만들고 첫번째 포스트로 이 글을 작성하고 있습니다.  \n처음하는 블로그 활동이라 운영에 부족함이 많을 수 있으며, 처음 작성하는 튜토리얼이라 내용이 많이 부실하고 진행에 문제가 발생할 수도 있습니다.  \n그러니, 너그러운 마음으로 봐주셨으면 좋겠습니다.\n\n제 블로그에 오신 것을 환영하며, 이제 본격적으로 시작하도록 하겠습니다! :rocket:\n\n감사합니다. :man-bowing:\n",
      "series": {
        "name": "WebdriverIO",
        "number": 1
      }
    },
    {
      "id": 3,
      "slug": "webdriverio-installation",
      "title": "2. WebdriverIO 설치하기",
      "description": "Typescript 기반의 WebdriverIO를 설치하는 법에 대해 설명하는 글입니다.",
      "coverImageUrl": "https://res.cloudinary.com/practicaldev/image/fetch/s--co5LdVu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/grantnorwood.com/app/uploads/2017/07/webdriver-io-logo.png%3Fw%3D1680%26ssl%3D1",
      "coverBackgroundColor": "hsl(344, 100%, 80%)",
      "createdAt": "2022. 2. 20.",
      "updatedAt": "2022. 3. 4.",
      "category": {
        "main": "Test Automation",
        "sub": "WebdriverIO"
      },
      "tags": [
        "webdriverio",
        "wdio",
        "e2e",
        "automation"
      ],
      "content": "\n> :warning: 경고  \n> 이 포스트는 WebdriverIO 의 최신 버전 (>=7.x)에 대한 설치 가이드입니다.  \n> 이 전 버전을 원하시는 경우 [이 전 버전의 WebdriverIO 웹사이트](https://webdriver.io/versions)를 참조해 주세요.\n\n## WebdrverIO 시스템 요구사항\n\n우선 [Node.JS](https://nodejs.org/ko)가 설치되어 있어야 합니다.  \nWebdriverIO는 Node.JS의 LTS 버전을 지원하며 LTS 릴리즈 목록은 [여기](https://nodejs.org/ko/about/releases)에서 확인 가능합니다.  \n(현재 Node.JS의 최소 LTS 버전은 v12입니다.)\n\n> Node.JS v16부터 동기 모드를 지원하지 않는 관계로 v16 이상의 Node.JS LTS 버전을 추천드립니다.  \n> 자세한 내용은 [여기](https://webdriver.io/docs/sync-vs-async)에서 확인 가능합니다.\n\n## 필자의 개발 환경\n\n저는 Intel Chipset의 Mac 환경에서 현재 최신 LTS 버전인 v17.5.0 버전을 사용하겠습니다.  \n제 개발 환경에 대한 자세한 스펙은 아래와 같습니다.\n\n- OS: macOS Big Sur ver. 11.4\n- Chipset: Intel Core i7\n- Node.JS: v17.5.0 LTS\n\nNode.JS 설치 및 Mac 개발 환경 세팅 등은 본 시리즈 내용과 무관하므로 넘어가겠습니다.  \n추후 기회가 된다면 관련 내용으로 포스팅 하도록 하겠습니다.\n\n## Node.JS 버전 확인하기\n\n설치에 앞서 현재 설치된 Node.JS의 버전을 확인합니다.  \n터미널에서 `node --verion` 명령어 입력 시 현재 설치된 노드의 버전이 출력됩니다.\n\n```bash\nnode --verion\nv17.5.0\n```\n\n버전이 v16이상인 노드가 정상적으로 설치되어 있다면 이제 본격적으로 WebdriverIO를 설치하도록 하겠습니다.\n\n## WebdriverIO 설치하기\n\nWebdriverIO의 설치 명령어는 `npm init wdio 폴더명` 입니다.  \n저는 webdriverio라는 폴더를 생성하고 해당 폴더에 WebdriverIO를 설치하겠습니다.\n\n```bash\nmkdir webdriverio\ncd webdriverio\nnpm init wdio .\n```\n\n터미널에서 위와 같이 입력을 하면 `create-wdio` 패키지를 설치할 것이냐고 묻는데 `y`를 눌러주시면 됩니다.\n\n```bash\nNeed to install the following packages:\n  create-wdio\nOk to proceed? (y) y\n```\n\n> :information_source: create-wdio 패키지는 WebdriverIO 설치를 도와주는 스타터 패키지입니다.\n\ncreate-wdio가 설치되고 create-wdio가 WebdriverIO의 CLI 패키지인 @wdio/cli를 설치합니다.  \n@wdio/cli 설치가 완료되면 WebdriverIO 설정에 필요한 기본적인 요구사항에 대해 질문합니다.\n\n전체 질문과 보기는 아래와 같습니다.\n\n```bash\n? Where is your automation backend located? # 설치 위치\n❯ On my local machine # 로컬에 설치\n  In the cloud using Experitest # Experitest 클라우드 환경에 설치\n  In the cloud using Sauce Labs # Sauce Labs 클라우드 환경에 설치\n  In the cloud using Browserstack or Testingbot or LambdaTest or a different service # Browserstack, Testingbot, LambdaTest, 기타 서비스 클라우드 환경에 설치\n  I have my own Selenium cloud # 자체 셀레니움 서버 환경에 설치\n\n? Which framework do you want to use? (Use arrow keys) # 사용할 테스트 프레임워크 종류\n❯ mocha # Mocha 사용\n  jasmine # Jasmine 사용\n  cucumber # Cucumber 사용\n\n? Do you want to use a compiler? (Use arrow keys) # 사용할 컴파일러 종류\n  Babel (https://babeljs.io/) # Babel 사용\n❯ TypeScript (https://www.typescriptlang.org/) # Typescript 사용\n  No! # 사용하지 않음\n\n? Where are your test specs located? # Specs 파일 위치 지정\n(./test/specs/**/*.ts) # 기본값\n\n? Do you want WebdriverIO to autogenerate some test files? # 기본 테스트 파일 생성 여부\n(Y/n)\n\n? Do you want to use page objects (https://martinfowler.com/bliki/PageObject.html)? # 페이지 오브젝트 패턴 사용 여부 (관련 파일 설치 여부)\n(Y/n)\n\n? Where are your page objects located? # 페이지 오브젝트 패턴 관련 파일 위치 지정\n(./test/pageobjects/**/*.ts) # 기본값\n\n? Which reporter do you want to use? (Press <space> to select, <a> to toggle all, <i> to invert selection) # 설치할 리포터 선택\n❯◉ spec\n ◯ dot\n ◯ junit\n ◯ allure\n ◯ sumologic\n ◯ concise\n ◯ reportportal\n ◯ video\n ◯ json\n ◯ cucumber\n ◯ mochawesome\n ◯ timeline\n ◯ html\n ◯ markdown\n ◯ delta\n ◯ tesults\n(Move up and down to reveal more choices)\n\n? Do you want to add a plugin to your test setup? (Press <space> to select, <a> to toggle all, <i> to invert selection) # 플러그인 설치 여부\n❯◉ wait-for # WDIO Wait For 기능 사용\n ◯ angular-component-harnesses # Angular Harnesses 기능 사용\n\n? Do you want to add a service to your test setup? # 설치할 서비스 선택\n ◯ chromedriver\n ◯ sauce\n ◯ testingbot\n ◯ selenium-standalone\n❯◉ devtools\n ◯ browserstack\n ◯ appium\n ◯ firefox-profile\n ◯ crossbrowsertesting\n ◯ eslinter-service\n ◯ lambdatest\n ◯ zafira-listener\n ◯ reportportal\n ◯ docker\n ◯ wdio-ui5\n ◯ wiremock\n ◯ ng-apimock\n ◯ slack\n ◯ intercept\n ◯ docker\n ◯ image-comparison\n ◯ novus-visual-regression\n ◯ rerun\n ◯ winappdriver\n ◯ ywinappdriver\n ◯ performancetotal\n ◯ cleanuptotal\n ◯ aws-device-farm\n ◯ ocr-native-apps\n ◯ ms-teams\n(Move up and down to reveal more choices)\n\n? What is the base url? # Base URL 설정\n(http://localhost) # 기본값\n\n? Do you want me to run `npm install` # 관련 패키지 설치 여부\n(Y/n)\n\n```\n\nTypescript, Mocha, Devtools를 사용할것이므로 아래와 같이 설정합니다.\n\n```bash\n? Where is your automation backend located?\nOn my local machine # 로컬에서 실행하므로 선택해 줍니다.\n? Which framework do you want to use?\nmocha # Mocha를 사용하므로 선택해 줍니다.\n? Do you want to use a compiler?\nTypeScript (https://www.typescriptlang.org/) # 타입스크립트를 사용하므로 선택해 줍니다.\n? Where are your test specs located?\n./test/specs/**/*.ts # 기본값을 선택해 줍니다.\n? Do you want WebdriverIO to autogenerate some test files?\nYes # 기본 설정을 확인해야 하므로 Yes를 선택해 줍니다.\n? Do you want to use page objects (https://martinfowler.com/bliki/PageObject.html)?\nYes # 이것도 마참가지로 기본 설정을 확인해야 하므로 Yes를 선택해 줍니다.\n? Where are your page objects located?\n./test/pageobjects/**/*.ts # 기본값을 선택해 줍니다.\n? Which reporter do you want to use?\nspec # 일단 Spec 하나만 선택합니다. 나중에 추가할 예정입니다.\n? Do you want to add a plugin to your test setup?\nwait-for # 기본적인 Waitr ~ For 기능을 확인할 것이므로 선택해 줍니다.\n? Do you want to add a service to your test setup?\ndevtools # 일단 Devtools 하나만 선택합니다. 나중에 추가할 예정입니다.\n? What is the base url? # 로컬에서 실행하므로 기본값을 선택해 줍니다.\nhttp://localhost\n? Do you want me to run `npm install` # 따로 설치할 필요가 없으므로 Yes를 선택해 줍니다.\nYes\n```\n\n여기까지 문제가 없었다면 설치는 완료된 것입니다.  \n하지만, 타입스크립트를 사용할 것이므로 추가 설정이 필요합니다.\n\n## Typesctript 설정\n\n### tsconfig.json 작성\n\n설치가 완료되면 `./test` 폴더에 `tsconfig.json` 파일이 있는데 루트 폴더로 이동해 줍니다.  \n그리고 아래와 같이 `types` 항목에 `@wdio/devtools-service`를 추가해 줍니다.\n\n```json\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"node\",\n      \"webdriverio/async\",\n      \"@wdio/mocha-framework\",\n      \"@wdio/devtools-service\", // 여기에 추가해 줍니다.\n      \"expect-webdriverio\"\n    ],\n    \"target\": \"ES5\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@test/*\": [\"test/*\"],\n      \"@types/*\": [\"types/*\"]\n    },\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true\n  },\n  \"include\": [\"./types/*.d.ts\", \"./test/**/*.ts\"],\n  \"exclude\": [\"./node_modules\"]\n}\n```\n\n### Types 설정\n\nCustom Commands 및 Custom Matchers 등 확장이 필요하므로 타입 확장을 할 수 있게 루트 폴더에 types 폴더를 생성하고 wdio.d.ts 파일을 생성합니다. ( ./types/wdio.d.ts )  \n그리고 wdio.d.ts 파일에 아래와 같이 작성합니다.\n\n```typescript\n// wdio.d.ts\ndeclare global {\n  namespace WebdriverIO {\n    interface Browser {\n      // browserCustomCommand: (arg: any) => Promise<void>\n    }\n    interface MultiRemoteBrowser {\n      // browserCustomCommand: (arg: any) => Promise<void>\n    }\n\n    interface Element {\n      // elementCustomCommand: (arg: any) => Promise<number>\n    }\n  }\n}\n```\n\n### wdio.conf.ts 설정 변경\n\nwdio 설치 시 typescript로 선택하면 wdio.conf.ts 파일의 `autoCompileOpts` 값이 자동으로 입력되는데 우리는 tsconfig.json 파일을 루트 폴더로 이동하였으므로 `autoCompileOpts`의 tsconfig.json 위치도 변경해 줘야 합니다.\n\n아래와 같이 작성합니다.\n\n```typescript\n// wdio.conf.ts\nexport const config: WebdriverIO.Config = {\n  ...\n  autoCompileOpts: {\n    autoCompile: true,\n    // see https://github.com/TypeStrong/ts-node#cli-and-programmatic-options\n    // for all available options\n    tsNodeOpts: {\n      transpileOnly: true,\n      project: './tsconfig.json',\n    },\n    // tsconfig-paths is only used if \"tsConfigPathsOpts\" are provided, if you\n    // do please make sure \"tsconfig-paths\" is installed as dependency\n    //tsConfigPathsOpts: {\n    //    baseUrl: './'\n    //}\n  },\n  ...\n}\n```\n\n## ESLint & Prettier 설정\n\n터미널에서 아래 명령어를 실행합니다.\n\n```bash\nnpm install --save-dev eslint prettier @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-prettier\n```\n\n루트 폴더에 `.eslintrc.json` 파일을 생성하고 본인의 설정에 맞게 Eslint를 작성해 줍니다.  \n저는 아래와 같이 작성하였습니다.\n\n```json\n{\n  \"root\": true,\n  \"env\": {\n    \"node\": true,\n    \"es2021\": true,\n    \"commonjs\": true\n  },\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\"],\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/eslint-recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"plugin:prettier/recommended\",\n    \"prettier\"\n  ],\n  \"ignorePatterns\": [\"node_modules\"],\n  \"rules\": {\n    \"@typescript-eslint/no-empty-interface\": \"off\"\n  }\n}\n```\n\n루트 폴더에 `.prettierrc.json` 파일을 생성하고 본인의 설정에 맞게 Prettier을 작성해 줍니다.  \n제 설정은 아래와 같습니다.\n\n```json\n{\n  \"printWidth\": 80,\n  \"trailingComma\": \"es5\",\n  \"tabWidth\": 2,\n  \"useTabs\": false,\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"bracketSpacing\": true,\n  \"arrowParens\": \"always\",\n  \"endOfLine\": \"lf\"\n}\n```\n\n여기까지 진행하셨으면 기본 설정은 끝났습니다.  \n`Typescript`, `ESLint`, `Prettier`에 대한 자세한 설명은 여기서 다루기에는 양이 방대하며 포스트 내용에서도 벗어나므로 추후 기회가 되면 따로 포스트하도록 하겠습니다.\n\n다시 본론으로 돌아와 이제 실제 구동이 되는지 확인해 보도록 하겠습니다.\n\n## WebdriverIO 실행 확인\n\n터미널에서 아래 명령어를 입력하고 실행합니다.\n\n```bash\nnpx wdio run ./test/wdio.conf.ts\n```\n\nWebdriverIO 설치 시 기본 예재를 추가했으므로, 예재 테스트가 실행이 되면서 로그들이 출력되고 최종적으로 아래와 같이 테스트 결과가 출력됩니다.\n\n```bash\n \"spec\" Reporter:\n------------------------------------------------------------------\n[Chrome 98.0.4758.109 darwin #0-0] Running: Chrome (v98.0.4758.109) on darwin\n[Chrome 98.0.4758.109 darwin #0-0] Session ID: dfd4fbae-55d3-494e-ba7b-c2e4c83d9d0b\n[Chrome 98.0.4758.109 darwin #0-0]\n[Chrome 98.0.4758.109 darwin #0-0] » /test/specs/example.e2e.ts\n[Chrome 98.0.4758.109 darwin #0-0] My Login application\n[Chrome 98.0.4758.109 darwin #0-0]    ✓ should login with valid credentials\n[Chrome 98.0.4758.109 darwin #0-0]\n[Chrome 98.0.4758.109 darwin #0-0] 1 passing (3.5s)\n\n\nSpec Files:      1 passed, 1 total (100% completed) in 00:00:07\n```\n\n여기까지 문제가 없었다면 WebdriverIO 설치는 끝났다고 보시면 됩니다.  \n지금까지 작성한 코드는 [깃허브](https://github.com/morooLee/webdriverio/tree/a37c7b8848e0644ea23927ece47acff0ae91ec36)에서 확인 가능합니다.\n\n이제 다음으로 `Page Object Pattern`에 대해 배워봅시다.\n",
      "series": {
        "name": "WebdriverIO",
        "number": 2
      }
    },
    {
      "id": 1,
      "slug": "qa-developer-memes",
      "title": "QA 관점에서 바라 본 QA와 Developer 밈들",
      "description": "QA와 Developer의 이해 관계를 보여주는 밈들에 대해서 QA 관점에서 가볍게 바라본 지극히 개인적인 이야기입니다.",
      "coverImageUrl": null,
      "coverBackgroundColor": "hsl(270, 100%, 80%)",
      "createdAt": "2022. 2. 16.",
      "updatedAt": "2022. 2. 16.",
      "category": {
        "main": "SQA",
        "sub": "Etc"
      },
      "tags": [
        "sqa",
        "meme",
        "qa",
        "developer"
      ],
      "content": "\n최근에 `QA와 Developer의 이해 관계` 와 관련된 밈들을 많이 보게 되었습니다.  \n대부분의 밈들이 해학적으로 잘 풀어내서 공감도 많이 받고 즐겁게 봤었는데요.\n\n그 중에 몇몇 밈들은 개발자 관점에서 그려지거나 QA 역할과는 모순된 부분들이 있어서 어떤 점이 문제로 생각되었는 지와 QA 관점에서 어떤 밈이 제일 괜찮았는지에 대해 가볍게 얘기해 보려 합니다.\n\n<mark>\n들어가기 앞서, 이 포스트의 내용은 제 관점에서 가볍게 바라본 지극히 개인적인 이야기임을 밝힙니다.\n</mark>\n\n## Meme #1 - 방탄 조끼\n\n<div className=\"video-container\">\n  <iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/6s2UJBFDCoA?start=25\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay=0; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen className=\"video-youtube\"></iframe>\n</div>\n\n> This is the original Developper vs QA Engineer meme  \n> Subscribe: https://bit.ly/2MZmvXg  \n> https://www.facebook.com/lolcomediha\n\n### 제품에 대한 파악 및 테스트 범위 산정에 대한 문제\n\n위 영상을 보면서 제품의 목적에 대해 QA가 전혀 인지를 하지 못한다는 생각이 들었습니다.\n\n방탄 조끼 같은 경우 피탄에 의한 주요 장기들의 치명상을 줄이는게 주 목적이라 생각합니다.\n물론 수납성과 같은 목적도 필요하고 중요하지만 이는 보조적인 성격을 띄므로 이러한 것들은 차치하고, 주 목적만을 고려한다고 하면 아래와 같다고 할 수 있습니다.\n\n1. 조끼라는 의복으로써의 역할\n2. 방탄의 성능 및 범위\n\n**조끼라는 의복으로써의 역할**\n\n방탄 조끼라는 이름에서 알 수 있듯이 이것은 의복중에 상의, 그 중에 조끼 형태의 의복임을 알 수 있습니다. 따라서, 의복 본연의 기능에 얼마나 충실한지도 주요 목적 중에 하나라고 생각합니다.\n\n- 움직임에 불편함은 없는지...\n- 입고 벗기가 수월한지...\n- 보온, 보습 등에 문제가 없는지...\n\n**방탄의 성능 및 범위**\n\n방탄의 성능 및 범위가 요구사항에 적합한지\n\n- 방탄력\n- 방탄 범위\n- 방탄 재질\n- 방잔 무게\n\n위의 영상에서 허벅지에 피탄이 되었다고 방탄 조끼에 결함이 있다고 할 수 있을까요?  \n그리고, 허벅지에 권총을 쏜 QA는 결함을 발견한거라고 말할 수 있을까요?  \n아마 대다수가 \"아니오\"라고 말할 듯 싶네요.\n\n허벅지에 총을 쏘는 행위는(테스팅) 제품의 목적과 맞지 않으며 테스트 범위에도 벗어나는 행동으로 불필요한 인력 및 시간을 낭비하는 결과를 초래 할 뿐입니다.\n\n### QA 관점에서의 Meme #1 - 방탄 조끼\n\n제가 QA 관점으로 위의 상황을 토대로 밈을 다시 만든다면 허벅지에 권총을 쏘는 대신 아래와 같은 행동을 취할 것 같습니다.\n\n- ~~대물 저격총을 꺼내들어 쏜다.~~ _(부하 테스트)_\n  - 권총을 이미 손에 쥐었으므로 제외\n- ~~개틀링건과 같은 기관총으로 한곳에 여러발을 쏜다.~~ _(스트레스 테스트)_\n  - 권총을 이미 손에 쥐었으므로 제외\n- 옆구리, 어깨와 같이 방탄에 취약해 보이는 부위에 쏜다. _(취약점 테스트)_\n- 겨드랑이 주변과 같은 조끼 끝부분에 쏜다. _(경계값 테스트)_\n\n## Meme #2 - 술집\n\n<blockquote className=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">A QA engineer walks into a bar. Orders a beer. Orders 0 beers. Orders 99999999999 beers. Orders a lizard. Orders -1 beers. Orders a ueicbksjdhd. <br/><br/>First real customer walks in and asks where the bathroom is. The bar bursts into flames, killing everyone.</p>&mdash; Brenan Keller (@brenankeller) <a href=\"https://twitter.com/brenankeller/status/1068615953989087232?ref_src=twsrc%5Etfw\">November 30, 2018</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\n\n> QA 엔지니어가 술집에 들어왔습니다.  \n> 맥주를 1개 주문합니다.  \n> 맥주를 0개도 주문해 봅니다.  \n> 99999999999개도 주문해 봅니다.  \n> 도마뱀도 주문해 보고, 맥주도 -1개 주문해 보고, #ㄸㄴㄹㅇ@$ㄴ도 주문해 봅니다.  \n> 드디어 첫번째 손님이 들어왔고, 그는 화장실이 어디에 있는지 물어봤습니다.  \n> 술집은 불길에 휩쌓였고, 모두 죽었습니다.\n\n### 테스트 계획 및 전략 수립에 대한 문제\n\n위의 글을 보면 결말에 도달하기까지 사건의 흐름 사이에 개연성이 전혀 없습니다.\n\n이 말인 즉슨, \"결함은 언제 어디서든 생각치 못한 곳에서 발생할 수 있다.\" 라는 뜻으로도 해석될 수 있으며 이것은 테스팅의 7가지 기본 원칙 중 하나인 `완벽한 테스팅은 불가능하다.` 에 대한 적절한 예시 일 수도 있습니다.\n\n하지만, QA 관점에서 바라보자면 위 영상에서 실행한 테스팅 방식에 대해 의구점이 듭니다.\n\n**테스트 계획**\n\n- 수행한 테스트를 보면 주문에 대해서만 진행했습니다. 따라서, 테스트 계획이 잘못되었다고 생각합니다.\n\n**테스트 전략**\n\n- Software QA가 아닌 관점에서 보자면 0개, -1개의 주문은 불필요한 테스트로 테스트 전략을 잘못 수립했다고 판단됩니다.\n- Software QA 관점에서 봐도 도마뱀(없는 메뉴로 가정) 주문이나 #ㄸㄴㄹㅇ@$ㄴ 주문은 동일한 테스트로 보여지며 이 또한 불필요한 테스트라 생각합니다.\n\n테스트 계획 및 전략을 제대로 수립했다고 해도 `완벽한 테스팅은 없는 것` 처럼 결함은 언제 어디서든 발견될 수 있습니다.  \n하지만, 이를 뒷바침 해주는 근거로 삼기에는 영상에서의 테스팅 과정이 너무 부실하다고 생각들었습니다.\n\n### QA 관점에서의 Meme #2 - 술집\n\n위의 글을 토대로 QA 관점으로 작성해 본다면 아래와 같을 것 같네요.\n\n> QA 엔지니어가 술집에 들어왔습니다.  \n> 맥주를 1개 주문합니다.  \n> 맥주 99999999999개도 주문해 봅니다.  \n> 도마뱀도 주문해 보고, 한번에 여러개 주문도 해봅니다.  \n> 의자에 앉아도 보고 주방에도 들어가 보고 여기저기 기웃거리며 둘러 봅니다.  \n> 드디어 첫번째 손님이 들어왔고, 그는 화장실이 어디에 있는지 물어봤습니다.  \n> 그리곤 주문도 하지 않은체 나가버렸고, 그 손님은 그 술집의 첫번째이자 마지막 손님이 되었습니다.\n\n혹은,\n\n> QA 엔지니어가 술집에 들어왔습니다.  \n> 맥주를 1개 주문합니다.  \n> 맥주 99999999999개도 주문해 봅니다.  \n> 도마뱀도 주문해 보고, 한번에 여러개 주문도 해봅니다.  \n> 의자에 앉아도 보고 주방에도 들어가 보고 여기저기 기웃거리며 둘러 봅니다.  \n> 드디어 첫번째 손님이 들어왔고, 그는 자리에 앉자마자 TV를 켰습니다.  \n> TV에서는 금주령에 대한 소식을 속보로 전하고 있었고, 그 손님은 그 술집의 첫번째이자 마지막 손님이 되었습니다.\n\n## Meme #3 - 모양 맞추기 (`BEST`)\n\n<div className=\"video-container\">\n  <iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/baY3SaIhfl0\" title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay=0; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen className=\"video-youtube\"></iframe>\n</div>\n\n> All credit goes to the talented actor, Alison Burke. Check out hers  \n> TikTok: https://www.tiktok.com/@tired_actor\n\n위의 동영상을 보시면 QA가 제품의 목적 및 의도를 잘 파악하고 있다는 생각이 들었습니다.\n그로 인해, 결함이 발생될 수 있는 부분을 잘 도출해 냈으며, 이를 아주 효과적으로 보여주었다고 생각합니다.\n\n겉으로 봐서는 요구사항에 맞게 실제 작동도 되지만, 시점을 달리 하면 의도와는 전혀 다르게 작동할 수도 있다는 것을 잘 보여준 것 같습니다. (~~그리고 개발자의 반응까지도...~~)\n\n이제까지 본 밈들 중에서 `QA와 Developer와의 이해 관계` 에 대해 제일 잘 표현했다고 느꼈던 밈입니다.\n\n## 마치며...\n\n모든 밈들이 재미 있었고, 공감도 많이 되었습니다.\n\n밈이라는 것이 즐거움을 통해 공감대를 형성하다보니 다소 과장된 부분이 있는 것은 사실입니다. 그리고 저는 이를 지적하고자 본 포스트를 작성한 것도 아닙니다.\n그저 이러한 밈들을 보면서 느꼈던 생각을 글로 표현해 보고자 하였습니다.\n\n테스팅은 결함을 발견하는 일입니다.\n그러다 보니 QA는 사용자의 입장과 부정적인 시각으로 제품을 바라봅니다.\n\n이는 일상 생활에도 많은 영향을 끼치며,  \n그러다보니 이렇게 밈에서도 문제점을 찾고 있는 **`제 자신에 대한 회고이기도 합니다.`**\n"
    }
  ],
  "categories": [
    {
      "name": "SQA",
      "parent": null,
      "children": [
        "Etc"
      ],
      "postIds": [
        1
      ]
    },
    {
      "name": "Etc",
      "parent": "SQA",
      "children": [],
      "postIds": [
        1
      ]
    },
    {
      "name": "Test Automation",
      "parent": null,
      "children": [
        "WebdriverIO"
      ],
      "postIds": [
        2,
        3
      ]
    },
    {
      "name": "WebdriverIO",
      "parent": "Test Automation",
      "children": [],
      "postIds": [
        2,
        3
      ]
    }
  ],
  "tags": [
    {
      "name": "sqa",
      "postIds": [
        1
      ]
    },
    {
      "name": "meme",
      "postIds": [
        1
      ]
    },
    {
      "name": "qa",
      "postIds": [
        1
      ]
    },
    {
      "name": "developer",
      "postIds": [
        1
      ]
    },
    {
      "name": "webdriverio",
      "postIds": [
        2,
        3
      ]
    },
    {
      "name": "wdio",
      "postIds": [
        2,
        3
      ]
    },
    {
      "name": "e2e",
      "postIds": [
        2,
        3
      ]
    },
    {
      "name": "automation",
      "postIds": [
        2,
        3
      ]
    }
  ],
  "series": [
    {
      "name": "WebdriverIO",
      "postIds": [
        2,
        3
      ]
    }
  ]
}